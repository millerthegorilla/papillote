#!/bin/sh
#
# Wifi network choice helper for kiosk.
# Author: J.Miller <millerthegorilla>

# Kill previous instances:
for x in $(pgrep -f '(WIFI_LIST|PASS_DIALOG)'); do
  kill -9 ${x}
done

# kill -13 $(pgrep -f "gtkdialog --program=PASS_DIALOG")
#kill -9 `ps | grep WIFI_LIST | grep -v grep | tr -s ' ' | sed -e 's/^ //g' | cut -d' ' -f1 | tr '\n' ' '` 2>/dev/null
#kill -9 `ps | grep PASS_DIALOG | grep -v grep | tr -s ' ' | sed -e 's/^ //g' | cut -d' ' -f1 | tr '\n' ' '` 2>/dev/null

# get screen size
VSIZE=$(($(cat /sys/class/graphics/*/modes | sed 's/^.*x//' | sed 's/[a-zA-Z].*//') - 30))

# Find wifi device
IFACE=$(echo $(for dev in `ls /sys/class/net`; do
    [ -d "/sys/class/net/$dev/wireless" ] && echo "$dev"
done) |head -n1)

for iface in $(ifconfig -a | sed 's/[ \t].*//;/^\(lo\|\)$/d'); do
    ifconfig $iface up
done

# attempt to connect to ethernet if iface exists via dhcpcd
IFS=$'\t';echo $(ifconfig -a | sed 's/[ \t].*//;/^\(lo\|\)$/d') &>/dev/null | grep eth && dhcpcd && sleep 2

# establish if we are connected and record which nics we are connected to
# and if connected record the ssid name if wireless nic.
unset IFS; for i in $(ifconfig -a | sed 's/[ \t].*//;/^\(lo\|\)$/d'); do
  ifconfig $i |grep inet &>/dev/null && CONNECTED="${CONNECTED} ${i}"
  iwconfig $i &>/dev/null && WIFI_CONNECTION="${WIFI_CONNECTION} $(iwconfig wlan0 | grep ESSID | sed 's/^.*ESSID:"//' | sed 's/".*$//') $i"
done

# get List of SSIDs
LIST="$(iwlist ${IFACE} scanning | grep ESSID | grep -v \"\" | sed 's/ESSID:"//' | sed 's/"//')"
# LIST="$(iwlist ${IFACE} scanning | grep ESSID | sed 's/ESSID://' | sed 's/""//')"

SSIDS=""
for ssid in "${LIST}"; do
  case ${SSIDS} in
     $ssid\ * | *\ $ssid | *$ssid* | $ssid) 
      # already seen
      ;;
    *)
      SSIDS="$SSIDS $ssid"
      ;;
  esac
done

#remove leading newline
SSIDS=$(echo -e "${SSIDS:2}")

# get Num of SSIDs
NUM_OF_WIFIS=$(echo -e "${SSIDS}" | grep -c '^')


# Calculate size of SSID list (57 is height of button on current screen, may need to be dynamic)
LABEL_HEIGHT=55
MIN_SIZE=$((${NUM_OF_WIFIS} * 57 + ${LABEL_HEIGHT}))

# Set Size of window on num of buttons or screen size whichever is smaller
if [ ${MIN_SIZE} -gt ${VSIZE} ];
then
   SIZE=${VSIZE}
else
   SIZE=${MIN_SIZE}
fi

BUTTONS=""
IFS=$'\n'; for x in ${SSIDS}; do 
   BUTTONS="$BUTTONS $(echo -e "<button image-position=\"2\"; tooltip-text=\"$(echo ${x} |xargs)\"><input file icon=\"network-wired\"></input><label>$(echo ${x} | xargs)</label><action function=\"exit\">SSID=\"$(echo ${x}|xargs)\"</action></button>";)"
done

# Construct gtkdialog window for SSID list
WIFI_LIST=$(echo "<window decorated=\"true\" title=\"Choose WIFI Network\" window-position=\"1\" icon-name=\"kiosk\" width-request=\"200\" height-request=\"${SIZE}\"><vbox scrollable=\"true\"><text width-request=\"100\" height-request=\"50\"><label>\"$(if [[ ! -z ${CONNECTED} ]]; then echo "Connected to ${WIFI_CONNECTION} via ${CONNECTED}"; else echo "Not connected!"; fi)\"</label></text>${BUTTONS}</vbox></window>")

export WIFI_LIST
# Get chosen SSID name
SSID_SELECTION=$(gtkdialog --program=WIFI_LIST) # | sed 's/EXIT="//' | sed 's/.$//')
SSID_SELECTION=$(echo $SSID_SELECTION | sed 's/EXIT="//' | sed 's/.$//')
[[ "${SSID_SELECTION}" == "abort" ]] && exit 0

unset SSID
eval "${SSID_SELECTION}"

# construct gtkdialog for password entry
export PASS_DIALOG='<window activate_default="true" decorated="true" title="Enter WIFI password for '${SSID}'" window-position="1" icon-name="kiosk"><vbox><text><label>Security type. Clear password for open network.</label></text><combobox><variable>SECURITY</variable><item>WPA2</item><item>WEP</item></combobox><entry><variable>PASSWORD</variable><height>15</height><width>350</width><default>"Enter Password"</default></entry><hbox><button cancel></button><button ok></button></hbox></vbox></window>'

# obtain password - should probably use openssl to encrypt but may not be necessary/doable
PASS_DIALOG=$(gtkdialog --program=PASS_DIALOG) # | sed 's/PASSWORD="//' | sed 's/EXIT="OK"//' | sed 's/.$//' | tr -d \\n)
unset EXIT
eval "${PASS_DIALOG}"

[[ ${EXIT} == "Cancel" ]] && exit 0

# get wpa_supplicant passphrase psk and SSID
if [[ -z "${PASSWORD}" ]]; then
   CONF=$(echo -e "ssid=\"${SSID}\"\nkey_mgmt=NONE");
elif [[ "${SECURITY}" == 'WPA2' ]]; then
   CONF=$(echo -e "key_mgmt=WPA-PSK\n$(wpa_passphrase ${SSID} "${PASSWORD}" | sed '/network={/d' | sed '/#psk=".*"/d' | sed '/}/d')");
elif [[ "${SECURITY}" == 'WEP' ]]; then
   CONF=$(echo -e "ssid=\"${SSID}\"\nkey_mgmt=NONE\nwep_key0=\"${PASSWORD}\"\nwep_tx_keyidx=0");
fi 

# save wpa config (ssid and psk)
IFS=$'\t'; echo ${CONF} > /opt/storage/wpa_conf

# save old wpa_supplicant.conf
mv /etc/wpa_supplicant.conf /etc/wpa_supplicant.old

# create new wpa_supplicant.conf
cp /opt/scripts/wpa_supplicant.template /etc/wpa_supplicant.conf
IFS=$' '; echo -e "${CONF}\n}" | tr -d '\t' >> /etc/wpa_supplicant.conf

# set permissions on wpa_supplicant.conf
chmod 0600 /etc/wpa_supplicant.conf

rfkill unblock all 2>/dev/null
# for nic in `iwconfig 2>/dev/null | cut -d" " -f1 | sed /^$/d | sort`; do
ifconfig ${IFACE} up
iwconfig ${IFACE} essid "${SSID}" 2>/dev/null
wpa_supplicant -B -i${IFACE} -c /etc/wpa_supplicant.conf -Dnl80211,wext > /dev/null 2>&1
# done
for x in `ls -1 /sys/class/net | grep -v ^lo`; do
dhcpcd -L -t 0 $x >/dev/null 2>&1 &
done

# take interface down
ifconfig ${IFACE} down
# reload wpa_supplicant
killall wpa_supplicant && wpa_supplicant -B -i${IFACE} -c /etc/wpa_supplicant.conf -Dnl80211,wext
#bring interface up
ifconfig ${IFACE} up

sleep 15

ifconfig ${IFACE} |grep inet && dunstify -u normal -i /usr/share/icons/oxygen/22x22/status/dialog-information.png "Connected to ${SSID} on ${IFACE}!" || dunstify -u normal -i /usr/share/icons/oxygen/22x22/status/dialog-warning.png "Failed to connect to ${SSID} on ${IFACE}!!!"
#job's a goodun.
